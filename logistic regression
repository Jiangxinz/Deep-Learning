import numpy as np
import matplotlib.pyplot as plt
import h5py

def sigmoid(z):
    s = 1/(1+np.exp(-z))
    return s
    
def load_set():
    train_dataset = h5py.File("F://Download/train_cat.h5","r")
    test_dataset = h5py.File("F://Download/test_cat.h5","r")
    
    train_dataset_x_orig = np.array(train_dataset["train_set_x"][:])
    train_dataset_y_orig = np.array(train_dataset["train_set_y"][:])
    
    test_dataset_x_orig = np.array(test_dataset["test_set_x"][:])
    test_dataset_y_orig = np.array(test_dataset["test_set_y"][:])
    
    train_dataset_y_orig = train_dataset_y_orig.reshape(1,train_dataset_y_orig.shape[0])
    test_dataset_y_orig = test_dataset_y_orig.reshape(1,test_dataset_y_orig.shape[0])
    
    classes = np.array(train_dataset["list_classes"][:])
    return train_dataset_x_orig, train_dataset_y_orig, test_dataset_x_orig, test_dataset_y_orig, classes
    
def initialize_wb(dim):
    w = np.zeros((dim,1))
    b = 0
    return w, b

def propagate(w, b, X, Y):
    m = X.shape[1] 
    Y_hat = sigmoid(np.dot(w.T,X)+b)                                     
    cost = -(np.sum(np.dot(Y,np.log(Y_hat).T)+np.dot((1-Y),np.log(1-Y_hat).T)))/m #成本函数
    dw = (np.dot(X,(Y_hat-Y).T))/m
    db = (np.sum(Y_hat-Y))/m
    cost = np.squeeze(cost)    
    grads = {"dw": dw,
             "db": db} 
    return grads, cost
    
def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):
    costs = []
    for i in range(num_iterations):    
        grads, cost = propagate(w, b, X, Y)
        dw = grads["dw"]
        db = grads["db"]
    
        w = w - learning_rate * dw
        b = b - learning_rate * db
    
        if i % 100 == 0:
            costs.append(cost)
            if print_cost:
                print("After loop %i times the cost value is : %f" %(i, cost))
                
    params = {"w": w,
              "b": b}
    grads = {"dw":dw,
             "db":db}
             
    return params, grads, costs
    
def predict(w, b, X):
    m = X.shape[1]
    Y_prediction = np.zeros((1,m))
    w = w.reshape(X.shape[0],1)
    
    Y_hat = sigmoid(np.dot(w.T,X)+b)
    
    for i in range(Y_hat.shape[1]):
        if Y_hat[:,i] > 0.5:
            Y_prediction[:,i] = 1
        else:
            Y_prediction[:,i] = 0
    return Y_prediction
    
def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):
    w, b = initialize_wb(X_train.shape[0])
    params, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    
    w = params['w']
    b = params['b']
    
    Y_prediction_train = predict(w, b, X_train)
    Y_prediction_test = predict(w, b, X_test)
    
    train_accuracy = 100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100
    test_accuracy = 100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100
    
    print("训练集识别准确度: {} %".format(train_accuracy))
    print("测试集识别准确度：{} %".format(test_accuracy))
    
    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test,
         "Y_prediction_train" : Y_prediction_train,
         "w" : w,
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    return d
    
train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_set()

m_train = train_set_x_orig.shape[0]
m_test = train_set_x_orig.shape[0]

num_px = test_set_x_orig.shape[1]

train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0],-1).T
test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0],-1).T

train_set_x = train_set_x_flatten/255.0
test_set_x = test_set_x_flatten/255.0

d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)

#不同学习率下的训练结果
learning_rates = [0.1, 0.01, 0.001]
models = {}
for i in learning_rates:
    print ("学习率: " + str(i))
    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False)
    print ('\n' + "-------------------------------------------------------" + '\n')
for i in learning_rates:
    plt.plot(np.squeeze(models[str(i)]["costs"]), label= str(models[str(i)]["learning_rate"]))
plt.ylabel('cost')
plt.xlabel('iterations')
legend = plt.legend(loc='upper center', shadow=True)
frame = legend.get_frame()
frame.set_facecolor('0.90')
plt.show()
